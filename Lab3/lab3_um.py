# -*- coding: utf-8 -*-
"""Lab3_UM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZUY_QZLrwFShhxpdX1dNfLx3hhhIeJWc
"""

import numpy as np 
from scipy import linalg, sparse
import pandas as pd


########### 1 Python Basics
# 1. Wypisanie elementu 3 tablicy  2. Dodanie tablic wartości tablic do siebie 3. Wypisanie napisu od 6 do 14 litery
#  4. Zwiększenie w napisie wszystkich liter 5. Utworzenie tablicy typu numpy z pythonowej listy oraz pomnożenie jej wartości przez 2
lista_imion = ["Paweł", "Andrzej", "Marysia", "Bartosz", "Weronika"]
lista_nazwisk = ["Nowak", "Kowalski", "Kowalska", "Tobiasz", "Nowak"]
napis = "toJestMojNapis"
lista_liczb = [2, 4, 6, 8]
moja_tablica_liczb = np.array(lista_liczb)
print(lista_imion[3])
print(lista_imion + lista_nazwisk)
print(napis[6:14])
print(napis.upper())
print(moja_tablica_liczb * 2)
print("\n", "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", "\n")

########### 2 Numpy Basics
#1. Obliczenie sumy tablic komendą np.add 2. Wyznaczenie maxymalnej wartości tablicy
# 3. Sortowanie tablicy min > max 4. Usuwanie danego elementu z tablicy 5. Ustawienie elementów tablicy względem wierszy z wcześniejszą zmianą struktury elementów w tablicy 
a=[1,2,3]
b=[22.5,2,10]
suma = np.add(a,b)
print(suma,"\n", np.max(suma),"\n", np.sort(suma))
print(np.delete(a,[1]))
arrayss = np.append(a,b)
stakowanie = np.hsplit(arrayss,3)
print(np.vstack(stakowanie))
print("\n", "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", "\n")

########### 3 Linear Algebra
#1. Utworzenie matrycy 2x2 z losowymi liczbami 2. Transponowanie matrycy A z wierszy w kolumny
# 3. Utworzenie macierza tożsamości 2x2.  4. Obliczenie funkcji trygonometrycznej sinus dla wartości macierza D
# 5. Pomnożenie wartości w tablicy D przez wartości w tablicy A 
A = np.matrix(np.random.random((2,2)))
F = np.eye(3, k=1)
D = np.mat([[3,4], [5,6]])
print(A)
print(A.T)
print(F)
print(linalg.sinm(D))
print(np.multiply(D,A))
print("\n", "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", "\n")

########### 4 Pandas Basics 
#1.Wydrukowanie poszczególnych elementów dataframe  2. usunięcie z tablicy danych elementów 
# 3. Informacja o rozmiarach dataframe  4. Sortowanie względem kolumny Country 
# 5. Usunięcie wartości z kolumny Country
s = pd.Series([3, -5, 7, 4], index=['a', 'b', 'c', 'd'])
data = {'Country': ['Belgium', 'India', 'Brazil'],
 'Capital': ['Brussels', 'New Delhi', 'Brasília'],
 'Population': [11190846, 1303171035, 207847528]}
df = pd.DataFrame(data,
  columns=['Country', 'Capital', 'Population'])
print(df[1:])
print(s.drop(['a', 'c']))
print(df.shape)
print(df.sort_values(by='Country'))
print(df.drop('Country', axis=1))
print("\n", "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", "\n")

########### 5 Scikit-Learn 
#1. Przygotowanie danych, knn nearest neighbour classification   2.
# 3.   4. 
# 5.  
from sklearn import neighbors, datasets, preprocessing
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
pd.set_option('display.max_columns', None)
iris = datasets.load_iris()
#tworze data frame
data_iris = pd.DataFrame(data= np.c_[iris['data'], iris['target']],
                         columns= iris['feature_names'] + ['target'])
print(data_iris.head(5))
#wyświetlam podstawowe statystyki
print(data_iris.describe())
#wydzielam zmienna zalezna i zmienne niezalezne
X, y = data_iris.iloc[:, 0:4], data_iris.target
#dziele zbior na uczacy i testowy
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=33)
#standaryzuje dane
scaler = preprocessing.StandardScaler().fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)
#definiuje estymator 
knn = neighbors.KNeighborsClassifier(n_neighbors=5)
#uczenie
knn.fit(X_train, y_train)
print(knn)
#predykcja klasy oraz pdp przynależnosci do danej klasy
y_pred = knn.predict(X_test)
y_pred_prob = knn.predict_proba(X_test)
print(y_pred)
print(y_pred_prob)
#ocena modelu
print(accuracy_score(y_test, y_pred))
#macierz pomylek
print(confusion_matrix(y_test, y_pred))


print("\n", "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", "\n")

########### 6 Matplotlib 
#Przygotowanie danych oraz stworzenie obrazu wymagane
#1. Zmiana koloru podczas tworzenia wykresu plot(x,y,color=) 2. Dodanie tekstu poniżej wykresu 
# 3. Narysowanie lini bez połączenia oraz użycie do tego elementu marker  4. Zmiana grubości lini 
# 5. Użycie atrybuty label oraz dodanie legendy

import matplotlib.pyplot as plt
x = [20,25,30,35,40,45]
y = [2500,5000,6500,8500,10000,12500]
fig = plt.figure()
ax = fig.add_subplot()
ax.plot(x, y, color='blue', linewidth=2, label = 'Przykład 1')
ax.text(1,-2.1, 'Autor: Paweł Michciński', style='italic')
ax.scatter([25,35,45],[4000,6000,10000],color='red',marker='o', label='Przykład 2')
ax.set(title='Zarobki programistów', ylabel='Wynagrodzenie', xlabel='Wiek')

plt.legend()
plt.show()

print("\n", "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", "\n")

########### 7 Seaborn 
#1. Utworzenie układu współrzędnych dla związku pomiedzy przetrwanymi pasażerami a płcią 2. Pokazanie w formie zielonych słupków obserwacji 
# 3. Kategoryczny wykres dla wartości survived i sex  4. Ustawienie nazw osi Y oraz X
# 5. Usuniecie połączenia osi Y
import seaborn as sns
titanic = sns.load_dataset("titanic")
iris = sns.load_dataset("iris")

g = sns.FacetGrid(titanic, col="survived", row="sex")
sns.countplot(x="deck",data=titanic,palette="Greens_d")
sns.catplot(x="pclass", y="survived", hue="sex",data=titanic) 
g.set_axis_labels("Survived", "Sex")
g.despine(left=True)

print("\n", "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", "\n")

########### 8 Bokeh 
#1.  2. 
# 3.   4. 
# 5.
from bokeh.models import ColumnDataSource
from bokeh.plotting import figure
from bokeh.io import output_notebook, show
from bokeh.models import HoverTool
from bokeh.models import CategoricalColorMapper
from bokeh.layouts import row

output_notebook()
#przygotowanie danych
df = pd.DataFrame(np.array([[33.9,4,65, 'US'],
 [32.4,4,66, 'Asia'],
 [21.4,4,109, 'Europe']]),
 columns=['mpg','cyl', 'hp', 'origin'],
 index=['Toyota', 'Fiat', 'Volvo'])

#tworzenie układu dla kolejno nowych wykresów
#figure 1 rysowanie kół na wykresie białym kolorem 
cds_df = ColumnDataSource(df)
p1 = figure(plot_width=300, tools='pan,box_zoom')
p1.circle(np.array([1,2,3]), np.array([3,2,1]), fill_color='white')
show(p1)
#rysowanie kwadratów w odpowiednich polach [x,y]
p2 = figure(plot_width=300, plot_height=300,x_range=(0, 8), y_range=(0, 8))
p2.square(np.array([1.5,3.5,5.5]), [1,4,3],
 color='blue', size=1)
show(p2)

# użycie lasso select
p4 = figure(plot_width = 300, tools='box_select,lasso_select')
p4.circle('mpg', 'cyl', source=cds_df)
show(p4)

p3 =figure()
hover = HoverTool(tooltips=None, mode='vline')
p3.add_tools(hover)
color_mapper = CategoricalColorMapper(factors=['US', 'Asia', 'Europe'],palette=['blue', 'red', 'green'])
p3.circle('mpg', 'cyl', source=cds_df,  color=dict(field='origin', transform=color_mapper), legend='Origin')
show(p3)
# dodanie wszystkich 3 wykresów w jeden layout
layout = row(p1,p2,p3)
show(layout)

print("\n", "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", "\n")

